use itertools::Itertools;

use crate::{
    number_parts::{
        ALTERNATE_LARGE_POWERS, DECIMAL_POINTS, DIGITS, FINANCIAL_SEPARATORS, IN_GROUP_POWERS,
        SEPARATORS, SEPARATOR_POWERS, WARI_FRACTIONALS,
    },
    VeryLargeNumberHandling,
};

#[derive(Debug, PartialEq)]
pub enum FormatType {
    Positional,
    SpelledOut,
    Fractional,
    Financial,
}

pub fn get_number_type(japanese: &str) -> Option<FormatType> {
    let mut whole = japanese;
    if has_decimal_separator(japanese) {
        let parts = japanese.split(DECIMAL_POINTS).collect_vec();
        if parts.len() != 2 {
            return None;
        }
        whole = parts[0];
        if !is_decimal_part_valid(parts[1]) {
            return None;
        }
    } else {
        if is_valid_fractional(japanese) {
            return Some(FormatType::Fractional);
        }
    }

    if whole.chars().any(|c| SEPARATORS.contains(&c)) {
        if !is_separated_with_commas_properly(whole) {
            return None;
        }
    }

    if whole
        .chars()
        .all(|c| DIGITS.contains_key(&c) || SEPARATORS.contains(&c))
    {
        return Some(FormatType::Positional);
    }

    if is_valid_japanese_positional(whole) {
        return Some(FormatType::Positional);
    }

    if is_valid_spelled_out(whole) {
        return Some(FormatType::SpelledOut);
    }

    if is_valid_financial(whole) {
        return Some(FormatType::Financial);
    }

    None
}

fn is_valid_fractional(japanese: &str) -> bool {
    if japanese.chars().count() % 2 != 0 {
        return false;
    }

    if japanese.chars().chunks(2).into_iter().any(|chunk| {
        let mut chunk = chunk.into_iter();
        let first = chunk.next().unwrap();
        let second = chunk.next().unwrap();
        !DIGITS.contains_key(&first) || !WARI_FRACTIONALS.contains_key(&second)
    }) {
        return false;
    }

    if japanese
        .chars()
        .filter(|c| WARI_FRACTIONALS.contains_key(&c))
        .tuple_windows()
        .any(|(a, b)| WARI_FRACTIONALS.get(&a) > WARI_FRACTIONALS.get(&b))
    {
        return false;
    }
    true
}

fn is_valid_financial(japanese: &str) -> bool {
    let mut chars = japanese.chars().peekable();
    let mut group_length = 0;
    let mut last_power = 0;
    let mut first = true;
    while let Some(c) = chars.next() {
        if DIGITS.contains_key(&c) {
            group_length += 1;
            if group_length > 3 {
                return false;
            }
            continue;
        }

        if chars.peek().is_some() {
            let potential_separator = format!("{}{}", c, chars.peek().unwrap());
            if let Some(power) = FINANCIAL_SEPARATORS.get(&potential_separator.as_str()) {
                if last_power > 0 && power > &last_power {
                    return false;
                }
                last_power = *power;
                group_length = 0;
                chars.next();
                continue;
            }
        }

        let potential_separator = c.to_string();
        if let Some(power) = FINANCIAL_SEPARATORS.get(&potential_separator.as_str()) {
            if !first && group_length != 3 {
                return false;
            }
            first = false;
            group_length = 0;

            if last_power > 0 && power > &last_power {
                return false;
            }

            last_power = *power;
            continue;
        }

        return false;
    }

    true
}

pub fn has_decimal_separator(japanese: &str) -> bool {
    japanese.matches(|c| DECIMAL_POINTS.contains(&c)).count() == 1
}

fn is_decimal_part_valid(decimal: &str) -> bool {
    decimal.chars().all(|c| DIGITS.contains_key(&c))
}

fn is_separated_with_commas_properly(japanese: &str) -> bool {
    let mut chars = japanese.chars().rev();
    let mut count = 0;
    while let Some(c) = chars.next() {
        if SEPARATORS.contains(&c) {
            if count != 3 {
                return false;
            }
            count = 0;
        } else {
            count += 1;
        }
    }
    true
}

fn is_valid_japanese_positional(japanese: &str) -> bool {
    let mut chars = japanese.chars().rev().peekable();
    let mut group = 0;
    let mut last_separator = 0;
    let mut first = true;

    while let Some(c) = chars.peek() {
        if DIGITS.contains_key(&c) {
            chars.next();
            group += 1;
            continue;
        }
        if group != 4 && (!first || group != 0) {
            return false;
        }
        first = false;
        group = 0;
        let power = match get_separator_value(&mut chars, &VeryLargeNumberHandling::Regular) {
            Some(power) => power,
            None => return false,
        };
        if power < last_separator {
            return false;
        }
        last_separator = power;
    }
    true
}

pub fn get_separator_value<I: Iterator<Item = char>>(
    iter: &mut I,
    very_large_number_handling: &VeryLargeNumberHandling,
) -> Option<u32> {
    let c = iter.next()?;
    let mut separator = c.to_string();
    for _ in 1..=4 {
        if let Some(sep_power) = SEPARATOR_POWERS.get(&separator.as_str()) {
            let power = if *very_large_number_handling == VeryLargeNumberHandling::Alternate
                && ALTERNATE_LARGE_POWERS.contains_key(&separator.as_str())
            {
                ALTERNATE_LARGE_POWERS[&separator.as_str()]
            } else {
                *sep_power
            };
            return Some(power);
        }

        let c = iter.next()?;
        separator.insert(0, c);
    }

    None
}

#[derive(Debug, PartialEq)]
enum SpelledOutState {
    GroupStart,
    Digit,
    GroupSeparator,
}

fn is_valid_spelled_out(japanese: &str) -> bool {
    let mut state = SpelledOutState::GroupStart;
    let mut last_power = 0;
    let mut last_group_power = 0;
    let mut chars = japanese.chars().rev().peekable();
    while let Some(c) = chars.peek() {
        match state {
            SpelledOutState::GroupStart => {
                if DIGITS.contains_key(&c) {
                    state = SpelledOutState::Digit;
                    chars.next();
                } else if let Some(power) = IN_GROUP_POWERS.get(&c) {
                    if *power < last_group_power {
                        return false;
                    }
                    last_group_power = *power;
                    state = SpelledOutState::GroupSeparator;
                } else {
                    return false;
                }
            }
            SpelledOutState::Digit => {
                if DIGITS.contains_key(&c) {
                    return false;
                }
                if let Some(power) = IN_GROUP_POWERS.get(&c) {
                    if *power < last_group_power {
                        return false;
                    }
                    last_group_power = *power;
                    state = SpelledOutState::GroupSeparator;
                    chars.next();
                } else {
                    let power =
                        match get_separator_value(&mut chars, &VeryLargeNumberHandling::Regular) {
                            Some(p) => p,
                            None => return false,
                        };
                    if power < last_power {
                        return false;
                    }
                    last_power = power;
                    state = SpelledOutState::GroupStart;
                    last_group_power = 0;
                }
            }
            SpelledOutState::GroupSeparator => {
                if DIGITS.contains_key(&c) {
                    state = SpelledOutState::Digit;
                    chars.next();
                } else if IN_GROUP_POWERS.contains_key(&c) {
                    state = SpelledOutState::GroupSeparator;
                    chars.next();
                } else {
                    let power =
                        match get_separator_value(&mut chars, &VeryLargeNumberHandling::Regular) {
                            Some(p) => p,
                            None => return false,
                        };
                    if power < last_power {
                        return false;
                    }
                    last_power = power;
                    state = SpelledOutState::GroupStart;
                    last_group_power = 0;
                }
            }
        }
        chars.next();
    }

    true
}
